import com.google.common.io.Files

apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId rootProject.ext.lockerApplicationId
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode rootProject.ext.versionCode as int
        versionName rootProject.ext.versionName
        println(versionCode)
        println(versionName)
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            Properties localProp = new Properties()
            File propFile = new File("${project.rootProject.rootDir.path}/local.properties")
            if (propFile.exists()) {
                //noinspection UnstableApiUsage
                localProp.load(Files.asByteSource(propFile).openStream())
            }

            storeFile file("${project.rootProject.rootDir.path}/environment/keys/android.jks")

            storePassword localProp.containsKey("KEYSTORE_PASS") ? localProp.getProperty("KEYSTORE_PASS") : project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias localProp.containsKey("ALIAS_NAME") ? localProp.getProperty("ALIAS_NAME") : (project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME"))
            keyPassword localProp.containsKey("ALIAS_PASS") ? localProp.getProperty("ALIAS_PASS") : project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")

            println("keyAlias: ${keyAlias}")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "market"
    productFlavors {
        row {
            dimension "market"
            versionNameSuffix "-row"
        }

        prc {
            dimension "market"
            versionNameSuffix "-prc"
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    dataBinding {
        enabled = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def flavor = variant.name
            def versionName = variant.versionName
            outputFileName = "locker_${versionName}.apk"
        }
    }

    resourcePrefix 'module_locker_'
}

dependencies {
    // Test
    testImplementation deps.junit
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Support Libraries
    implementation deps.support.app_compat
    implementation deps.support.material
    implementation deps.support.recyclerview
    implementation deps.support.preference
    implementation deps.support.constraint

    // Arch
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    annotationProcessor deps.lifecycle.compiler

    // Tor
    implementation deps.tornaco.logger

    implementation deps.guava

    // Lombok
    annotationProcessor deps.lombok.core
    compileOnly deps.lombok.core

    // Xposed
    compileOnly deps.xposed.api

    // Framework
    implementation files('libs/flyme_fingerprint.jar')

    // Projects
    implementation project(":third_party:pinlockview")
    implementation project(":third_party:patternlockview")
    implementation project(':third_party:recyclerview-fastscroll')

    implementation project(':module_common')

    implementation project(':android_framework:base')
}

buildDir = rootProject.projectDir.path + "/out/module_locker"